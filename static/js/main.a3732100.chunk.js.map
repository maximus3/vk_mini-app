{"version":3,"sources":["views/MainUS.js","views/Main.js","views/Admin.js","App.js","index.js"],"names":["osName","platform","MainUS","id","popout","view_go","fetchedUser","useState","activePanel","setActivePanel","go","e","currentTarget","dataset","to","title","size","level","onClick","data-to","left","IOS","Main","before","photo_200","src","description","city","first_name","last_name","Admin","App","activeView","setActiveView","setUser","setPopout","useEffect","a","connect","send","user","fetchData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3732100.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Panel, PanelHeader, Group, Div, Button, HeaderButton, Cell } from '@vkontakte/vkui';\r\nimport { platform, IOS } from '@vkontakte/vkui';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\r\n\r\nconst osName = platform();\r\n\r\nconst MainUS = ({ id, popout, view_go, fetchedUser }) => {\r\n    const [activePanel, setActivePanel] = useState('main');\r\n    \r\n    const go = e => {\r\n        setActivePanel(e.currentTarget.dataset.to);\r\n\t};\r\n\r\n    return (\r\n    <View id={id} activePanel={activePanel} popout={popout}>\r\n    \r\n\t  <Panel id=\"main\">\r\n\t\t<PanelHeader>Бассейн</PanelHeader>\r\n\t\t<Group title=\"Вход\">\r\n\t\t\t<Div>\r\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={view_go} data-to=\"main\">\r\n\t\t\t\t\tРегистрация\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={view_go} data-to=\"admin\">\r\n\t\t\t\t\tАдмин-панель\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"info\">\r\n\t\t\t\t\tИнформация\r\n\t\t\t\t</Button>\r\n\t\t\t</Div>\r\n\t\t</Group>\r\n\t  </Panel>\r\n      \r\n      <Panel id=\"info\">\r\n\t\t<PanelHeader\r\n\t\t\tleft={<HeaderButton onClick={go} data-to=\"main\">\r\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\r\n\t\t\t</HeaderButton>}\r\n\t\t>\r\n            Информация\r\n        </PanelHeader>\r\n        <Cell>\r\n            Данное приложение предназначено для записи в бассейн.\r\n\t\t</Cell>\r\n      </Panel>\r\n      \r\n    </View>\r\n    );\r\n}\r\n\r\nexport default MainUS;","import React, { useState } from 'react';\r\nimport { View, Panel, PanelHeader, Group, Cell, Avatar, Div, Button } from '@vkontakte/vkui';\r\n\r\nconst Main = ({ id, popout, view_go, fetchedUser }) => {\r\n    const [activePanel, setActivePanel] = useState('main');\r\n    \r\n    const go = e => {\r\n        setActivePanel(e.currentTarget.dataset.to);\r\n\t};\r\n\r\n    return (\r\n    <View id={id} activePanel={activePanel} popout={popout}>\r\n\t  <Panel id=\"main\">\r\n\t\t<PanelHeader>Бассейн</PanelHeader>\r\n\t\t{fetchedUser &&\r\n\t\t<Group title=\"Добро пожаловать!\">\r\n\t\t\t<Cell\r\n\t\t\t\tbefore={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\r\n\t\t\t\tdescription={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\r\n\t\t\t>\r\n\t\t\t\t{`${fetchedUser.first_name} ${fetchedUser.last_name}`}\r\n\t\t\t</Cell>\r\n\t\t</Group>}\r\n\r\n\t\t<Group title=\"Действия\">\r\n\t\t\t<Div>\r\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tМои записи\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tЗаписаться\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tУдалить запись\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={view_go} data-to=\"mainUS\">\r\n\t\t\t\t\tВыход\r\n\t\t\t\t</Button>\r\n\t\t\t</Div>\r\n\t\t</Group>\r\n\t  </Panel>\r\n    </View>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, { useState } from 'react';\r\nimport { View, Panel, PanelHeader, Group, Cell, Avatar, Div, Button } from '@vkontakte/vkui';\r\n\r\nconst Admin = ({ id, popout, view_go, fetchedUser }) => {\r\n    const [activePanel, setActivePanel] = useState('main');\r\n    \r\n    const go = e => {\r\n        setActivePanel(e.currentTarget.dataset.to);\r\n\t};\r\n\r\n    return (\r\n    <View id={id} activePanel={activePanel} popout={popout}>\r\n    \r\n\t  <Panel id=\"main\">\r\n\t\t<PanelHeader>Админ-панель</PanelHeader>\r\n\t\t<Group title=\"Действия\">\r\n\t\t\t<Div>\r\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tПросмотр сеансов\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tДобавить сеанс\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"main\">\r\n\t\t\t\t\tУдалить сеанс\r\n\t\t\t\t</Button>\r\n                <Button size=\"xl\" level=\"2\" onClick={view_go} data-to=\"mainUS\">\r\n\t\t\t\t\tВыход\r\n\t\t\t\t</Button>\r\n\t\t\t</Div>\r\n\t\t</Group>\r\n\t  </Panel>\r\n      \r\n    </View>\r\n    );\r\n}\r\n\r\nexport default Admin;","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport { Root, ScreenSpinner } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport MainUS from './views/MainUS';\nimport Main from './views/Main';\nimport Admin from './views/Admin';\n\nconst App = () => {\n    const [activeView, setActiveView] = useState('mainUS');\n    const [fetchedUser, setUser] = useState(null);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n    \n    //const fetchedUser = {id: 154785330, first_name: \"Максим\", last_name: \"Иванов\" };\n    \n    useEffect(() => {\n      async function fetchData() {\n\t    const user = await connect.send('VKWebAppGetUserInfo');\n\t\tsetUser(user);\n\t\tsetPopout(null);\n\t  }\n      fetchData();\n    }, [/*count*/]); //Запускается только если изменилось значение переменной count*/\n    \n    const go = e => {\n        setActiveView(e.currentTarget.dataset.to);\n\t};\n    \n    return (\n      <Root activeView={activeView}>\n        <MainUS id=\"mainUS\" popout={popout} view_go={go} fetchedUser={fetchedUser}/>\n        <Main id=\"main\" popout={popout} view_go={go} fetchedUser={fetchedUser}/>\n        \n        <Admin id=\"admin\" popout={popout} view_go={go} fetchedUser={fetchedUser}/>\n      \n      \n      \n      \n      {/*\n        <View id=\"main\" activePanel={activePanel} popout={popout}>\n          <Panel id=\"general\">\n            <PanelHeader>VKUI</PanelHeader>\n            <Group title=\"Items\">\n              <Cell>{fetchedUser.id}</Cell>\n              <Cell expandable onClick={go} data-panel_to=\"greetings\" data-view_to={activeView}>Next Panel</Cell>\n            </Group>\n          </Panel>\n            \n          <Panel id=\"greetings\">\n            <PanelHeader>View 1</PanelHeader>\n            <Cell expandable onClick={go} data-panel_to=\"users-search\" data-view_to=\"users-search\">Next View</Cell>\n          </Panel>\n        </View>\n          \n        <View id=\"users-search\" activePanel={activePanel} popout={popout}>\n          <Panel id=\"users-search\">\n            <PanelHeader>View 2</PanelHeader>\n            <Cell expandable onClick={go} data-panel_to=\"check-user-actions\" data-view_to=\"check-user-actions\">Next View</Cell>\n          </Panel>\n        </View>\n          \n        <View id=\"check-user-actions\" activePanel={activePanel} popout={popout}>\n          <Panel id=\"check-user-actions\">\n            <PanelHeader>View 3</PanelHeader>\n            <Cell expandable onClick={go} data-panel_to=\"general\" data-view_to=\"main\">Next View</Cell>\n          </Panel>\n      </View>*/}\n      </Root>\n    );\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}